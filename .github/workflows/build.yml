name: CI

on:
  push:
    branches:
      - master
      - dantti/v5
  pull_request:
    branches:
      - master
      - dantti/v5

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        build_type:
          - Debug
          - Release
        config:
          - qt_version: "6.4.2"
          - qt_version: "6.7.3"

    steps:
      - name: Install dependencies on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt update -qq
          sudo apt install -y doxygen graphviz memcached libmemcached-dev libpwquality-dev

      - name: Install Qt with options and default aqtversion
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: null  # use whatever the default is
          version: ${{ matrix.config.qt_version }}
          cache: true

      - name: Install ninja-build tool (must be after Qt due PATH changes)
        uses: turtlesec-no/get-ninja@main

      - name: Make sure MSVC is found when Ninja generator is in use
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Configure project
        run: >
          cmake -S . -B ./build -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DENABLE_MAINTAINER_CFLAGS=${{ matrix.build_type == 'Debug' }}
          -DBUILD_SHARED_LIBS=${{ matrix.build_type == 'Debug' }}
          -DBUILD_ALL=ON
          -DBUILD_DOCS=${{ runner.os == 'Linux' }}
          -DUSE_JEMALLOC=OFF
          -DPLUGIN_VIEW_CUTELEE=OFF
          -DPLUGIN_VIEW_EMAIL=OFF
          -DPLUGIN_VALIDATOR_PWQUALITY=${{ runner.os == 'Linux' }}
          -DPLUGIN_MEMCACHED=${{ runner.os == 'Linux' }}

      - name: Build project
        run: cmake --build ./build

      - name: Run tests
        id: ctest
        if: ${{ matrix.build_type == 'Debug' }}
        run: ctest --test-dir ./build -C ${{ matrix.build_type }} --output-on-failure

      - name: Read tests log when it fails
        uses: andstor/file-reader-action@v1
        if: ${{ steps.ctest.conclusion == 'failure' }}
        with:
          path: "./build/Testing/Temporary/LastTest.log"
